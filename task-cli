#!/bin/bash/php

<?php

/*
| Task Tracker using CLI
*/

/**
 * The file name to be stored at the root of the folder.
 * This will be the storage for the data.
 *
 * @const FILE_NAME
 */
const FILE_NAME = 'data.json';

/**
 * The payload of the data.
 *
 * @var array $payload
 */
$payload = [
    'id'          => null, // unique identifier of the task
    'description' => null, // The description of the task.
    'status'      => 'todo', // The status of the task [todo, in-progress, done]
    'createdAt'   => date('Y-m-d H:i:s'),
    'updatedAt'   => date('Y-m-d H:i:s')
];

$arguments = $_SERVER['argv']; // or simply $argv
$argumentCounts = $_SERVER['argc']; // or simply $argc

/**
 * Exit when no command is provided.
 *
 * Index 1 is the entrypoint of the command whereas the Index 0 is the task-cli.
 */
if (!isset($arguments[1])) {
    echo "No command provided.";
    exit();
}

/**
 * The command of the cli.
 * The 2nd index is the command name.
 *
 * @var string $command
 */
$command = $arguments[1];

/**
 * The argument count of the command.
 * The first 2 array value is task-cli {command}
 *
 * @var int $commandArgumentCounts
 */
$commandArgumentCounts = ($argumentCounts ?? 0) - 2;

# Adding a new task
//task-cli add "Buy groceries"
//# Output: Task added successfully (ID: 1)
if ($command === 'add') {

    // If argument is equal to 1, the expected argument is description
    // otherwise die
    invalidArguments(
        numberOfArguments     : $commandArgumentCounts,
        allowedNumberArguments: 1
    );

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    /**
     * Get latest id of the data
     *
     * @var int $latestId
     */
    $latestId = !empty($data) ? max(array_column($data, 'id')) : 0;

    /**
     * Get description from arguments
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $description = $arguments[2];

    $id = $latestId + 1;

    $payload['id'] = $id;
    $payload['description'] = $description;
    file_put_contents(FILE_NAME, json_encode([...$data, $payload]));

    die("Task added successfully (ID: {$id})");
}

//# Updating and deleting tasks
//task-cli update 1 "Buy groceries and cook dinner"

if ($command === 'update') {

    // If argument is equal to 2, the expected argument is id and description
    // otherwise die
    invalidArguments(
        numberOfArguments     : $commandArgumentCounts,
        allowedNumberArguments: 2
    );

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    /**
     * Get the specified id to update
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $id = $arguments[2];

    /**
     * Get description from arguments
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $description = $arguments[3];

    // Check if id exists on data
    // otherwise throw no record found
    noRecordFound($id, $data);

    // Update description and updatedAt of data
    $data = array_map(function (array $datum) use ($id, $description) {
        if ((string)$datum['id'] === $id) {
            $datum['description'] = $description;
            $datum['updatedAt'] = date('Y-m-d H:i:s');
        }

        return $datum;
    }, $data);

    file_put_contents(FILE_NAME, json_encode([...$data]));

    die("Specified task updated successfully.");
}


//task-cli delete 1
if ($command === 'delete') {

    // If argument is equal to 1, the expected argument is id
    // otherwise die
    invalidArguments(
        numberOfArguments     : $commandArgumentCounts,
        allowedNumberArguments: 1
    );

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    /**
     * Get the specified id to delete
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $id = $arguments[2];

    // Check if id exists on data
    // otherwise throw no record found
    noRecordFound($id, $data);

    // Update description and updatedAt of data
    $data = array_filter($data, fn(array $datum) => (string)$datum['id'] !== $id);

    file_put_contents(FILE_NAME, json_encode([...$data]));

    die("Specified task deleted successfully.");
}

//
//# Marking a task as in progress or done
//task-cli mark-in-progress 1
if ($command === 'mark-in-progress') {

    // If argument is equal to 1, the expected argument is id
    // otherwise die
    invalidArguments(
        numberOfArguments     : $commandArgumentCounts,
        allowedNumberArguments: 1
    );

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    /**
     * Get the specified id to update
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $id = $arguments[2];

    // Check if id exists on data
    // otherwise throw no record found
    noRecordFound($id, $data);

    // Update description and updatedAt of data
    $data = array_map(function (array $datum) use ($id) {
        if ((string)$datum['id'] === $id) {
            $datum['status'] = 'in-progress';
            $datum['updatedAt'] = date('Y-m-d H:i:s');
        }

        return $datum;
    }, $data);

    file_put_contents(FILE_NAME, json_encode([...$data]));

    die("Specified task marked as in progress successfully.");
}

//task-cli mark-done 1
if ($command === 'mark-done') {

    // If argument is equal to 1, the expected argument is id
    // otherwise die
    invalidArguments(
        numberOfArguments     : $commandArgumentCounts,
        allowedNumberArguments: 1
    );

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    /**
     * Get the specified id to update
     *
     * Note: index 0 and 1 being task-cli and command
     */
    $id = $arguments[2];

    // Check if id exists on data
    // otherwise throw no record found
    noRecordFound($id, $data);

    // Update description and updatedAt of data
    $data = array_map(function (array $datum) use ($id) {
        if ((string)$datum['id'] === $id) {
            $datum['status'] = 'done';
            $datum['updatedAt'] = date('Y-m-d H:i:s');
        }

        return $datum;
    }, $data);

    file_put_contents(FILE_NAME, json_encode([...$data]));

    die("Specified task marked as done successfully.");
}

//# Listing all tasks
//task-cli list
//# Listing tasks by status
//task-cli list done
//task-cli list todo
//task-cli list in-progress
if ($command === 'list') {

    // If argument is equal to 1, the expected argument is id
    // Optional argument is status
    // otherwise die
    if ($commandArgumentCounts > 2) {
        die("Invalid arguments.");
    }

    // Check if file exists, create if not exists
    createFileIfNotExists();

    /**
     * Get status
     *
     * @var ?string $status
     */
    $status = $arguments[2] ?? null;

    if ($status && !in_array($status, ['todo', 'in-progress', 'done'])) die('Status is invalid');

    /**
     * Get data of the file
     *
     * @var array $data
     */
    $data = data();

    if ($status) $data = array_filter($data, fn(array $datum) => $datum['status'] === $status);

    if (empty($data)) die('No tasks');

    print_r($data);
    die();
}

/**
 * Stop process due to invalid arguments.
 *
 * If the number of arguments does not match the allowed number of arguments
 *
 * @param int $numberOfArguments      - The number of arguments passed from the CLI.
 * @param int $allowedNumberArguments - The allowed number of arguments accepted by the command.
 *
 * @return void
 */
function invalidArguments(int $numberOfArguments, int $allowedNumberArguments): void
{
    if ($numberOfArguments !== $allowedNumberArguments) die("Invalid arguments.");
}

/**
 * Check if file exists otherwise create it
 *
 * @return void
 */
function createFileIfNotExists(): void
{
    if (!file_exists(FILE_NAME)) touch(FILE_NAME);
}

/**
 * Get the content of the file.
 *
 * @return array
 */
function data(): array
{
    return json_decode(file_get_contents(FILE_NAME), true) ?? [];
}

/**
 * Stop process due to no record found.
 *
 * @param string $id
 * @param array  $data
 *
 * @return void
 */
function noRecordFound(string $id, array $data): void
{
    if (!in_array($id, array_column($data, 'id'))) die('No record found');
}
